<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="httputil_8h" kind="file">
    <compoundname>httputil.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">sstream</includes>
    <includes refid="paramsmap_8h" local="yes">paramsmap.h</includes>
    <includes refid="stringlist_8h" local="yes">stringlist.h</includes>
    <includedby refid="apprequest_8h" local="yes">apprequest.h</includedby>
    <includedby refid="session_8h" local="yes">session.h</includedby>
    <includedby refid="var_8h" local="yes">var.h</includedby>
    <includedby refid="commontags_8h" local="yes">commontags.h</includedby>
    <includedby refid="httputil_8cpp" local="yes">httputil.cpp</includedby>
    <incdepgraph>
      <node id="384">
        <label>paramsmap.h</label>
        <link refid="paramsmap_8h-source"/>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
      </node>
      <node id="381">
        <label>string</label>
      </node>
      <node id="380">
        <label>map</label>
      </node>
      <node id="385">
        <label>paramsmapcore.h</label>
        <link refid="paramsmapcore_8h-source"/>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
      </node>
      <node id="382">
        <label>vector</label>
      </node>
      <node id="383">
        <label>sstream</label>
      </node>
      <node id="386">
        <label>paramsmapcore.hpp</label>
        <link refid="paramsmapcore_8hpp-source"/>
        <childnode refid="385" relation="include">
        </childnode>
      </node>
      <node id="379">
        <label>httputil.h</label>
        <link refid="httputil.h"/>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="387">
        <label>stringlist.h</label>
        <link refid="stringlist_8h-source"/>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="392">
        <label>var.h</label>
        <link refid="var_8h-source"/>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="393">
        <label>htmltag.h</label>
        <link refid="htmltag_8h-source"/>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="394">
        <label>commontags.h</label>
        <link refid="commontags_8h-source"/>
        <childnode refid="390" relation="include">
        </childnode>
      </node>
      <node id="389">
        <label>apprequest.h</label>
        <link refid="apprequest_8h-source"/>
        <childnode refid="390" relation="include">
        </childnode>
      </node>
      <node id="390">
        <label>cgiapp.h</label>
        <link refid="cgiapp_8h-source"/>
      </node>
      <node id="391">
        <label>session.h</label>
        <link refid="session_8h-source"/>
        <childnode refid="390" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>httputil.h</label>
        <link refid="httputil.h"/>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="httputil_8h_132149b918f9b259099e55a4951d92c26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int HexPairValue</definition>
        <argsstring>(const char *)</argsstring>
        <name>HexPairValue</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="41"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1625658d8994331d80e5ebad235a0efe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int UrlDecode</definition>
        <argsstring>(const char *, char *)</argsstring>
        <name>UrlDecode</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="42" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="46" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1844645184e0125df42014be5064ec79f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int UrlEncode</definition>
        <argsstring>(const char *, char *, unsigned)</argsstring>
        <name>UrlEncode</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>unsigned</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="43" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="78" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1ee3f99e1851b820d2c6aa7e7d72deb51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string UrlDecodeString</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>UrlDecodeString</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="44" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="103" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_10fef66c3662b6085e702e9aef5bf63ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string UrlEncodeString</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>UrlEncodeString</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="45" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_100042884bb738a59159afd1c6a4e2ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classStringList" kindref="compound">StringList</ref></type>
        <definition>StringList split</definition>
        <argsstring>(string, char)</argsstring>
        <name>split</name>
        <param>
          <type>string</type>
        </param>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="47" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1d8dc720ee07f7e170c187e26711a2036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trimLeft</definition>
        <argsstring>(std::string, char c=&apos;\0&apos;)</argsstring>
        <name>trimLeft</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
          <defval>&apos;\0&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="49" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="151" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_16d3b41da0d96247c8f053651a24662c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trimRight</definition>
        <argsstring>(std::string, char c=&apos;\0&apos;)</argsstring>
        <name>trimRight</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
          <defval>&apos;\0&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="50" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="164" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_19bb6b63e9ea04b5a96546661e817d61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trim</definition>
        <argsstring>(std::string, char c=&apos;\0&apos;)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
          <defval>&apos;\0&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="51" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_13f684f231d8f1e7ddcf20b8f6d6e7f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const long i)</argsstring>
        <name>toString</name>
        <param>
          <type>const long</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="53" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_155a71d9bfc2322ae35f0984a5c6e19bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const int i)</argsstring>
        <name>toString</name>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="54" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_18c852a0de65c0a67ff3978382cac35bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const short i)</argsstring>
        <name>toString</name>
        <param>
          <type>const short</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="55" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1c59335ed7a23c777a337b9a6c703f59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const float i)</argsstring>
        <name>toString</name>
        <param>
          <type>const float</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="56" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1f4932f2b4720bce16cb58db7eca9bc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const double i)</argsstring>
        <name>toString</name>
        <param>
          <type>const double</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="57" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_12c960349c0ecdd885b12bdd99e9fa83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const unsigned long i)</argsstring>
        <name>toString</name>
        <param>
          <type>const unsigned long</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="58" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1b872523af0dfc238724cdd950450aef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const unsigned int i)</argsstring>
        <name>toString</name>
        <param>
          <type>const unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="59" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1934cfd150aadc5e214d11dd389d73d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const unsigned short i)</argsstring>
        <name>toString</name>
        <param>
          <type>const unsigned short</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="60" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="226" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1f4db012070244ae7b1e041b6eaa89949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const char i)</argsstring>
        <name>toString</name>
        <param>
          <type>const char</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="61" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="233" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1a4d5b49c28ed52fae119e35655392dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string toString</definition>
        <argsstring>(const char *i)</argsstring>
        <name>toString</name>
        <param>
          <type>const char *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="62" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_182be1d5570a97e6e6aad70e183e04c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string&amp; toString</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>toString</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="63" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="httputil_8h_1f73c3cd903633c7d017ab0b9b9b24c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string htmlSpecialChars</definition>
        <argsstring>(string srcStr)</argsstring>
        <name>htmlSpecialChars</name>
        <param>
          <type>string</type>
          <declname>srcStr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h" line="65" bodyfile="/home/neel/dev/c++/cgixx/cgi++/httputil.cpp" bodystart="246" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2008<sp/>by<sp/>Neel<sp/>Basu<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/>neel@zigmoyd<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307,<sp/>USA.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//some<sp/>of<sp/>the<sp/>codes<sp/>(Url<sp/>Encoding<sp/>and<sp/>Decoding)<sp/>are<sp/>borrowed<sp/>from<sp/>http://www.koders.com/cpp/fidB2A537A71CAA62B45600A401E58354F15272EBBC.aspx?s=mdef%3Amd5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>URLENCODE_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>URLENCODE_H</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;var.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;paramsmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVar" kindref="compound">Var</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::stringstream;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HexPairValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UrlDecode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UrlEncode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">std::string<sp/>UrlDecodeString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">std::string<sp/>UrlEncodeString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="classStringList" kindref="compound">StringList</ref><sp/>split(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">std::string<sp/>trimLeft(std::string,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">std::string<sp/>trimRight(std::string,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">std::string<sp/>trim(std::string,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>i);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>htmlSpecialChars(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>srcStr);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/neel/dev/c++/cgixx/cgi++/httputil.h"/>
  </compounddef>
</doxygen>
