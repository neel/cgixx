<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.6">
  <compounddef id="classVar" kind="class" prot="public">
    <compoundname>Var</compoundname>
    <includes refid="var_8h" local="no">var.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classVar_1155c960ed347bb236f5f91019d32bc25" prot="private" static="no" mutable="no">
        <type>string</type>
        <definition>string Var::__data</definition>
        <argsstring></argsstring>
        <name>__data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="40" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classVar_14e11abfa7ef2661cb2d8d3122aa72520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;, const Var &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <defname>o</defname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="42" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_182df12b1a94c2bfad03f945470c56ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const int &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="43" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1fd1602a96ba16d51bbabfc1790d280cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const unsigned int &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="44" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_185aebdea490c1ebdc494a6b8a0ffc223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const short &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="45" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1eb6bc49cd9e1ace436ce0d0779ce9cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const unsigned short &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="46" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1b2b15879da0782d15c1527f38917e510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const long &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="47" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_128a32c2d210b53b168d3f1bc324d7299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const unsigned long &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="48" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1f2d950dec527d16635fce4814b9a73e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const float &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="49" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_185098fe1ba5b2bd119cf756cdd12ccd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const double &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="50" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1a703ec49a60910c50db9ddd8a08bc313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const char &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const char &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="51" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1ad144f600d9775dce7d57cb548f7f90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const char *r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="52" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1ef495115b59b28838c8e2f8aaa115989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const Var &amp;l, const string &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="53" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1014316817c3584b2c8e20cf49c3562d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const int &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="54" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1dc359028d42f822b95554d880474e079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const unsigned int &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="55" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1cbf8cb6876af47be7857804b0c748a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const short &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="56" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_117a72bb79f6fc6dc27c72bb08f6c806f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const unsigned short &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="57" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_18f53055bdb54db533c03a8a7139da6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const long &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="58" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_18c4a0a31d2513724b615f2a67c445e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const unsigned long &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="59" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1473cf3d5907e3245a797ecd354f6efe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const float &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="60" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_128a679935c4b01783a4603034401d121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const Var &amp;l, const double &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="61" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_11f2f8765fcc1f9fcc979b64f03cdcb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const int &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="62" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_16a33b07248dcfe35f6b88fa2b163da72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const unsigned int &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="63" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_15172e71ee7876218112934f63470327a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const short &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="64" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_18c5360db352dd859748233765ed081a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const unsigned short &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="65" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1fe9be5f677aff3819112e4faf3a8aed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const long &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="66" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1f6ec1e49df9087313d16a1996a5b56b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const unsigned long &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="67" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_176eddfbbcb6ce3b4e0c43c08ff8d62fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const float &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="68" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_15c094b2208547b1b2bad13b6e976f7ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const Var &amp;l, const double &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="69" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1b11167b1c6a983a0b884d3819fce476a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const int &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="70" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_15071f85d07aa0f20dcb136d493cf2128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const unsigned int &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="71" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_100bfab22e5d267d23f08c3cd953d55d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const short &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="72" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_13e47ad4fd49715cc8505d4094c9371bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const unsigned short &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="73" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_19ac304983b488e99fa052b6a7bba392c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const long &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="74" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1281fe6770293875d26c2d2c1d72449da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const unsigned long &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="75" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_156f86bd37ce2de90187a5cba6c336b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const float &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="76" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_15eb45d18589af6e48bc42231b773171c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const Var &amp;l, const double &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="77" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_146e5fda32500be987e1289f9b76b278a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const int &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="78" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1fc411edd9a1a77eea7d62082ac2e3c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const unsigned int &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="79" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_162ca1b32353fa939f1c4368f8aa80a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const short &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="80" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_17b0b86aacc7d03ad7c032e62c9e0be0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const unsigned short &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="81" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1ae7664cf10202bf6cd0b8d83e64fa825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const long &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="82" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1eecfe7eb3700cee039f87f8a6549e055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const unsigned long &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="83" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1d8877e6026e286a940e2bd1cfdc2c669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const float &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const float &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="84" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_170cc2c56b604013cb09a4b6f27217ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const double &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const double &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="85" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_14e030811872ef1975afd95c6a224b9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const char &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const char &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="86" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_146aa3d8c4ecd5cee2935bfcaf7f7c214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const char *l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const char *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="87" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1e451950dbece221b6b64ebd7f0edff0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator+</definition>
        <argsstring>(const string &amp;l, const Var &amp;r)</argsstring>
        <name>operator+</name>
        <param>
          <type>const string &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="88" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1dde335d9e939cf1cd3973e4ecdace55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const int &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="89" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_17c43f39734e8d41aa205d82be7cb5d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const unsigned int &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="90" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_14f7449625789e17bc472af57fad227e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const short &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="91" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1dc417ed717b1ac7561b106ec1e539303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const unsigned short &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="92" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1005ebec81dea8e554cb4a08ebcdcded9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const long &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="93" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1c76c5561bc9e5b78f2a518255dc5c208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const unsigned long &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="94" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_12f94ddcb80f049344aabbe51a321a1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const float &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const float &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="95" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1fe92b16eecbf17bf06ec78e89334ab5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator-</definition>
        <argsstring>(const double &amp;l, const Var &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const double &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="96" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1314820b745358a8a8e8401295757cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const int &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="97" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1cac6b65e6ea4b5d054735ca44d0394a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const unsigned int &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="98" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1b9dc1783c652da766d070f84d08d87c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const short &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="99" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1de7c96670f5a85ae9c90ae7df1c4e814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const unsigned short &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="100" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_110d23b0550458ef7ce050b104c0001c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const long &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="101" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_17e468572d8e9c6786915d81e92fdc8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const unsigned long &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="102" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_159586cd5ae3c745baa9363083043c60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const float &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="103" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1d11cecbfd89ab58e9f75012c1d7070aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator*</definition>
        <argsstring>(const double &amp;l, const Var &amp;r)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="104" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1ad62a92437a4bfd0f2efa16702a26cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const int &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="105" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_11214b9a70f230aa5f0f92e2fd4a1be45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const unsigned int &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="106" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1101734bcd7f5a9c1a208e187dab792c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const short &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="107" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1d97468551c1506c373f2afdb88f40cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const unsigned short &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned short &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="108" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_14815e00071aae3e86ea109e556b74946" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const long &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="109" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1be9bd4aa91c5fda4e4bf8c857dc55e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const unsigned long &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="110" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_13e60892575af5103410d047ca898cbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const float &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const float &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="111" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="friend" id="classVar_1d89ff5777f14e0851a010dacfcaa6789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classVar" kindref="compound">Var</ref></type>
        <definition>Var operator/</definition>
        <argsstring>(const double &amp;l, const Var &amp;r)</argsstring>
        <name>operator/</name>
        <param>
          <type>const double &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="112" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="169" bodyend="169"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classVar_14bb1b12f7b8431c7d36e74216c9d0717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const int r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="113" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classVar_112b078f76009965c5d5c80ca806983ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const unsigned int r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="114" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classVar_131d73e7f641896e16d57e3ef01cd3ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const short r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="115" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1581eef061e50fe7f0f648b8de5fcb699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const unsigned short r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="116" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classVar_195be0effe332f9e713d59e8bbc604958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const long r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="117" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classVar_17862de46a2c0bef16f71bb3e82bf6692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const unsigned long r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const unsigned long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="118" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classVar_10035f89e37efb4ae17c12453e44b81b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const float r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="119" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classVar_17de3db4816bdd14810b6426504a66c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const double r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="120" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classVar_103b89deb763b3c76afa6457ecae5d14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const char r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const char</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="121" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classVar_119ff4000945a208475b604cf21fd23be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const char *r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const char *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="122" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1543095449a0f529305da7de9df78905d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator+=</definition>
        <argsstring>(const string &amp;r)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const string &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="123" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1382ee06269eb99897eb1fe7b067575ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const int r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="124" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1410d018e99772280a94deb0c85f5330e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const unsigned int r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="125" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classVar_18294fc348d32d71641911b7deac542a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const short r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="126" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1ef605a3b98d7febea584aaf81e0b3903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const unsigned short r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="127" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classVar_17b248e807849b1ed97f7c08d529c46ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const long r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="128" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1bfbd07cfcdd0498e06fb4ce4e5732d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const unsigned long r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const unsigned long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="129" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1c6d15d50d55a4cdb0ee35887caf10455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const float r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="130" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1494194face36950b73461ac8d47e1b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator-=</definition>
        <argsstring>(const double r)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="131" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1d655335684c472a236c8c67a379094d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const int r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="132" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1a14b6b2e99d98995acdeb20ba61eb6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const unsigned int r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="133" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1cb3c458d7659a58f83b48b4a59e48e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const short r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="134" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1be4001dba23630ef0712b24e612d9d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const unsigned short r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="135" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1e41f41a5977f457fbdb2fe4133ed2397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const long r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="136" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1dda1593624bf331db944a0a81e152750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const unsigned long r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const unsigned long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="137" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classVar_10175d9191ad7cb0dbc34dc0ffdaf8e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const float r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="138" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classVar_15910b0b92187e3c78a2d49dc622b9a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator*=</definition>
        <argsstring>(const double r)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="139" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1c63be27f3de4c4fe6b0c9e3bab91acca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const int r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="140" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1488d18235ef01a5f2e61b43f7dce35c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const unsigned int r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="141" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1b02ce884f553cd6c7bb88af8a0483213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const short r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="142" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1f9640fe881fc4ba52db75c4f052060a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const unsigned short r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned short</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="143" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classVar_11ac4544a432386b94f23ab7c23e811b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const long r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="144" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1debf5a66db6616c14f0ad38018941609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const unsigned long r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const unsigned long</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="145" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classVar_162a0df010f34125f7b91763b64a262d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const float r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const float</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="146" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1e4c8a2a99853f502becc2eed4f597f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator/=</definition>
        <argsstring>(const double r)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="147" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1b5a22d57926e2f433c2e9548485f8ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="148" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classVar_136b15e3d265ce507d72ad7f1a5b1415d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
        <definition>const Var &amp; Var::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="149" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classVar_13dec6b7eb4a17e2f5edb5e97ec658c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>()</argsstring>
        <name>Var</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="150" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1f1da9850b2af24e3f83e99eefdfc8afb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::~Var</definition>
        <argsstring>()</argsstring>
        <name>~Var</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="151" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classVar_12454843f8e59c8275dc4bf317bd83107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const Var &amp;src)</argsstring>
        <name>Var</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="152" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classVar_154b7b0c0eaea765b9ab5d4589f7e882d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const char *val)</argsstring>
        <name>Var</name>
        <param>
          <type>const char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="153" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1802b20b083f5a93b334275d90feda6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const double val)</argsstring>
        <name>Var</name>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="154" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classVar_19ff95566445dfb743b663dbe671d8c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const float val)</argsstring>
        <name>Var</name>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="155" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1ee9a4bd8d00e470de418d0a859418713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const int val)</argsstring>
        <name>Var</name>
        <param>
          <type>const int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="156" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1d3167f908e6e8a355fab012cdcbef279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const short val)</argsstring>
        <name>Var</name>
        <param>
          <type>const short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="157" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1cc94780272e98b0775418f72a0d3cbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const long val)</argsstring>
        <name>Var</name>
        <param>
          <type>const long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="158" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1373f48cfb3c0c184126ee0858b8f1ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const string &amp;val)</argsstring>
        <name>Var</name>
        <param>
          <type>const string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="159" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classVar_17920f605b896012cdde5aaaf4183f798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const char val)</argsstring>
        <name>Var</name>
        <param>
          <type>const char</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="160" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1f7c9c5ffe3ba997d2d6f1799bc9caf81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const unsigned int val)</argsstring>
        <name>Var</name>
        <param>
          <type>const unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="161" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classVar_19bc36aaa458c72c026d55f4e9720bffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const unsigned long val)</argsstring>
        <name>Var</name>
        <param>
          <type>const unsigned long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="162" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1c242a7e6016df8215cd09f925b2e95e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Var::Var</definition>
        <argsstring>(const unsigned short val)</argsstring>
        <name>Var</name>
        <param>
          <type>const unsigned short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="163" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1cfb3b27d9a90b2278068c4c0616a7030" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Var::data</definition>
        <argsstring>() const </argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="164" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1d4ba277b09977dff02bfd967213b986b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Var::setData</definition>
        <argsstring>(const char *data)</argsstring>
        <name>setData</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="165" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classVar_119445862eb8d0a6ce594326754492548" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Var::setData</definition>
        <argsstring>(const Var &amp;val)</argsstring>
        <name>setData</name>
        <param>
          <type>const <ref refid="classVar" kindref="compound">Var</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="166" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classVar_15128ee4ca9b4e868dff3724562413823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Var::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="167" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classVar_15ceac5f71482331f8d76135e94b7236b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string &amp; Var::toString</definition>
        <argsstring>() const </argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="168" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="44" bodyend="46"/>
        <referencedby refid="classCGIApp_1793863dd291caad8ad02001434a9b0ff" compoundref="cgiapp_8cpp" startline="171" endline="179">CGIApp::detectRoute</referencedby>
        <referencedby refid="classSession_147baf956cead0046fcbac45c572c70d3" compoundref="session_8cpp" startline="84" endline="94">Session::start</referencedby>
      </memberdef>
      <memberdef kind="function" id="classVar_14b8ab77896158a56ba93d6c01e8d5589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long Var::toLong</definition>
        <argsstring>() const </argsstring>
        <name>toLong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="169" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1a9f4bb634a37cea60419ffa813027eae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Var::toInt</definition>
        <argsstring>() const </argsstring>
        <name>toInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="170" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1f3a89b2ce7659ee5c56d113ac07fb557" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Var::toFloat</definition>
        <argsstring>() const </argsstring>
        <name>toFloat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="171" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1594a4b4f28b4aa725f6bf780312e187c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Var::toDouble</definition>
        <argsstring>() const </argsstring>
        <name>toDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="172" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1a9cf383b9c920c8bee4badefec924eb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Var::toChar</definition>
        <argsstring>() const </argsstring>
        <name>toChar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="173" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classVar_138d7b1016c27eb68252404797773e71a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator const string &amp;</definition>
        <argsstring>() const </argsstring>
        <name>operator const string &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="174" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1ee48faf68598e74fb4a6be959feb6a04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator char</definition>
        <argsstring>() const </argsstring>
        <name>operator char</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="175" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classVar_18a7dbc82f15eb6167f097f2fed8a30d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator long</definition>
        <argsstring>() const </argsstring>
        <name>operator long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="176" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1e344617a87feb27a31d82fe5753f6824" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator int</definition>
        <argsstring>() const </argsstring>
        <name>operator int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="177" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classVar_12ad0fb12c87741c232b74a65d402a278" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator float</definition>
        <argsstring>() const </argsstring>
        <name>operator float</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="178" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classVar_101e64417e2ac9ba93fb52988133ab5b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator double</definition>
        <argsstring>() const </argsstring>
        <name>operator double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="179" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classVar_1061d4eddf83efaa79daa9bc8a1bcb31e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Var::operator char *</definition>
        <argsstring>() const </argsstring>
        <name>operator char *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="180" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="180" bodyend="180"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Neel Basu &lt;neel&gt; </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="398">
        <label>string</label>
      </node>
      <node id="397">
        <label>Var</label>
        <link refid="classVar"/>
        <childnode refid="398" relation="usage">
          <edgelabel>__data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/neel/dev/c++/cgixx/cgi++/var.h" line="38" bodyfile="/home/neel/dev/c++/cgixx/cgi++/var.h" bodystart="38" bodyend="181"/>
    <listofallmembers>
      <member refid="classVar_1155c960ed347bb236f5f91019d32bc25" prot="private" virt="non-virtual"><scope>Var</scope><name>__data</name></member>
      <member refid="classVar_1cfb3b27d9a90b2278068c4c0616a7030" prot="public" virt="non-virtual"><scope>Var</scope><name>data</name></member>
      <member refid="classVar_1ee48faf68598e74fb4a6be959feb6a04" prot="public" virt="non-virtual"><scope>Var</scope><name>operator char</name></member>
      <member refid="classVar_1061d4eddf83efaa79daa9bc8a1bcb31e" prot="public" virt="non-virtual"><scope>Var</scope><name>operator char *</name></member>
      <member refid="classVar_138d7b1016c27eb68252404797773e71a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator const string &amp;</name></member>
      <member refid="classVar_101e64417e2ac9ba93fb52988133ab5b7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator double</name></member>
      <member refid="classVar_12ad0fb12c87741c232b74a65d402a278" prot="public" virt="non-virtual"><scope>Var</scope><name>operator float</name></member>
      <member refid="classVar_1e344617a87feb27a31d82fe5753f6824" prot="public" virt="non-virtual"><scope>Var</scope><name>operator int</name></member>
      <member refid="classVar_18a7dbc82f15eb6167f097f2fed8a30d2" prot="public" virt="non-virtual"><scope>Var</scope><name>operator long</name></member>
      <member refid="classVar_11f2f8765fcc1f9fcc979b64f03cdcb0f" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_16a33b07248dcfe35f6b88fa2b163da72" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_15172e71ee7876218112934f63470327a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_18c5360db352dd859748233765ed081a3" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1fe9be5f677aff3819112e4faf3a8aed5" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1f6ec1e49df9087313d16a1996a5b56b9" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_176eddfbbcb6ce3b4e0c43c08ff8d62fe" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_15c094b2208547b1b2bad13b6e976f7ed" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1314820b745358a8a8e8401295757cac5" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1cac6b65e6ea4b5d054735ca44d0394a5" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1b9dc1783c652da766d070f84d08d87c8" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1de7c96670f5a85ae9c90ae7df1c4e814" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_110d23b0550458ef7ce050b104c0001c8" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_17e468572d8e9c6786915d81e92fdc8b7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_159586cd5ae3c745baa9363083043c60d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1d11cecbfd89ab58e9f75012c1d7070aa" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*</name></member>
      <member refid="classVar_1d655335684c472a236c8c67a379094d5" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_1a14b6b2e99d98995acdeb20ba61eb6b9" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_1cb3c458d7659a58f83b48b4a59e48e14" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_1be4001dba23630ef0712b24e612d9d4f" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_1e41f41a5977f457fbdb2fe4133ed2397" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_1dda1593624bf331db944a0a81e152750" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_10175d9191ad7cb0dbc34dc0ffdaf8e32" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_15910b0b92187e3c78a2d49dc622b9a6c" prot="public" virt="non-virtual"><scope>Var</scope><name>operator*=</name></member>
      <member refid="classVar_182df12b1a94c2bfad03f945470c56ffd" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1fd1602a96ba16d51bbabfc1790d280cf" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_185aebdea490c1ebdc494a6b8a0ffc223" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1eb6bc49cd9e1ace436ce0d0779ce9cc9" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1b2b15879da0782d15c1527f38917e510" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_128a32c2d210b53b168d3f1bc324d7299" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1f2d950dec527d16635fce4814b9a73e2" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_185098fe1ba5b2bd119cf756cdd12ccd3" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1a703ec49a60910c50db9ddd8a08bc313" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1ad144f600d9775dce7d57cb548f7f90f" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1ef495115b59b28838c8e2f8aaa115989" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_146e5fda32500be987e1289f9b76b278a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1fc411edd9a1a77eea7d62082ac2e3c1d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_162ca1b32353fa939f1c4368f8aa80a38" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_17b0b86aacc7d03ad7c032e62c9e0be0c" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1ae7664cf10202bf6cd0b8d83e64fa825" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1eecfe7eb3700cee039f87f8a6549e055" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1d8877e6026e286a940e2bd1cfdc2c669" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_170cc2c56b604013cb09a4b6f27217ce3" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_14e030811872ef1975afd95c6a224b9a4" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_146aa3d8c4ecd5cee2935bfcaf7f7c214" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1e451950dbece221b6b64ebd7f0edff0a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+</name></member>
      <member refid="classVar_1b5a22d57926e2f433c2e9548485f8ea7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator++</name></member>
      <member refid="classVar_14bb1b12f7b8431c7d36e74216c9d0717" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_112b078f76009965c5d5c80ca806983ef" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_131d73e7f641896e16d57e3ef01cd3ea4" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_1581eef061e50fe7f0f648b8de5fcb699" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_195be0effe332f9e713d59e8bbc604958" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_17862de46a2c0bef16f71bb3e82bf6692" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_10035f89e37efb4ae17c12453e44b81b2" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_17de3db4816bdd14810b6426504a66c07" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_103b89deb763b3c76afa6457ecae5d14b" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_119ff4000945a208475b604cf21fd23be" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_1543095449a0f529305da7de9df78905d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator+=</name></member>
      <member refid="classVar_1014316817c3584b2c8e20cf49c3562d3" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1dc359028d42f822b95554d880474e079" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1cbf8cb6876af47be7857804b0c748a0c" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_117a72bb79f6fc6dc27c72bb08f6c806f" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_18f53055bdb54db533c03a8a7139da6ce" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_18c4a0a31d2513724b615f2a67c445e9f" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1473cf3d5907e3245a797ecd354f6efe4" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_128a679935c4b01783a4603034401d121" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1dde335d9e939cf1cd3973e4ecdace55e" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_17c43f39734e8d41aa205d82be7cb5d38" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_14f7449625789e17bc472af57fad227e7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1dc417ed717b1ac7561b106ec1e539303" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1005ebec81dea8e554cb4a08ebcdcded9" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1c76c5561bc9e5b78f2a518255dc5c208" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_12f94ddcb80f049344aabbe51a321a1f4" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_1fe92b16eecbf17bf06ec78e89334ab5d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-</name></member>
      <member refid="classVar_136b15e3d265ce507d72ad7f1a5b1415d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator--</name></member>
      <member refid="classVar_1382ee06269eb99897eb1fe7b067575ad" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1410d018e99772280a94deb0c85f5330e" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_18294fc348d32d71641911b7deac542a2" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1ef605a3b98d7febea584aaf81e0b3903" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_17b248e807849b1ed97f7c08d529c46ce" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1bfbd07cfcdd0498e06fb4ce4e5732d23" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1c6d15d50d55a4cdb0ee35887caf10455" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1494194face36950b73461ac8d47e1b05" prot="public" virt="non-virtual"><scope>Var</scope><name>operator-=</name></member>
      <member refid="classVar_1b11167b1c6a983a0b884d3819fce476a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_15071f85d07aa0f20dcb136d493cf2128" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_100bfab22e5d267d23f08c3cd953d55d7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_13e47ad4fd49715cc8505d4094c9371bd" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_19ac304983b488e99fa052b6a7bba392c" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1281fe6770293875d26c2d2c1d72449da" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_156f86bd37ce2de90187a5cba6c336b68" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_15eb45d18589af6e48bc42231b773171c" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1ad62a92437a4bfd0f2efa16702a26cf6" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_11214b9a70f230aa5f0f92e2fd4a1be45" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1101734bcd7f5a9c1a208e187dab792c7" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1d97468551c1506c373f2afdb88f40cbe" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_14815e00071aae3e86ea109e556b74946" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1be9bd4aa91c5fda4e4bf8c857dc55e1d" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_13e60892575af5103410d047ca898cbdf" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1d89ff5777f14e0851a010dacfcaa6789" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/</name></member>
      <member refid="classVar_1c63be27f3de4c4fe6b0c9e3bab91acca" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_1488d18235ef01a5f2e61b43f7dce35c6" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_1b02ce884f553cd6c7bb88af8a0483213" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_1f9640fe881fc4ba52db75c4f052060a4" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_11ac4544a432386b94f23ab7c23e811b8" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_1debf5a66db6616c14f0ad38018941609" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_162a0df010f34125f7b91763b64a262d0" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_1e4c8a2a99853f502becc2eed4f597f5a" prot="public" virt="non-virtual"><scope>Var</scope><name>operator/=</name></member>
      <member refid="classVar_14e11abfa7ef2661cb2d8d3122aa72520" prot="public" virt="non-virtual"><scope>Var</scope><name>operator&lt;&lt;</name></member>
      <member refid="classVar_1d4ba277b09977dff02bfd967213b986b" prot="public" virt="non-virtual"><scope>Var</scope><name>setData</name></member>
      <member refid="classVar_119445862eb8d0a6ce594326754492548" prot="public" virt="non-virtual"><scope>Var</scope><name>setData</name></member>
      <member refid="classVar_15128ee4ca9b4e868dff3724562413823" prot="public" virt="non-virtual"><scope>Var</scope><name>size</name></member>
      <member refid="classVar_1a9cf383b9c920c8bee4badefec924eb4" prot="public" virt="non-virtual"><scope>Var</scope><name>toChar</name></member>
      <member refid="classVar_1594a4b4f28b4aa725f6bf780312e187c" prot="public" virt="non-virtual"><scope>Var</scope><name>toDouble</name></member>
      <member refid="classVar_1f3a89b2ce7659ee5c56d113ac07fb557" prot="public" virt="non-virtual"><scope>Var</scope><name>toFloat</name></member>
      <member refid="classVar_1a9f4bb634a37cea60419ffa813027eae" prot="public" virt="non-virtual"><scope>Var</scope><name>toInt</name></member>
      <member refid="classVar_14b8ab77896158a56ba93d6c01e8d5589" prot="public" virt="non-virtual"><scope>Var</scope><name>toLong</name></member>
      <member refid="classVar_15ceac5f71482331f8d76135e94b7236b" prot="public" virt="non-virtual"><scope>Var</scope><name>toString</name></member>
      <member refid="classVar_13dec6b7eb4a17e2f5edb5e97ec658c9c" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_12454843f8e59c8275dc4bf317bd83107" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_154b7b0c0eaea765b9ab5d4589f7e882d" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1802b20b083f5a93b334275d90feda6f9" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_19ff95566445dfb743b663dbe671d8c0a" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1ee9a4bd8d00e470de418d0a859418713" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1d3167f908e6e8a355fab012cdcbef279" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1cc94780272e98b0775418f72a0d3cbe2" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1373f48cfb3c0c184126ee0858b8f1ef5" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_17920f605b896012cdde5aaaf4183f798" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1f7c9c5ffe3ba997d2d6f1799bc9caf81" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_19bc36aaa458c72c026d55f4e9720bffa" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1c242a7e6016df8215cd09f925b2e95e0" prot="public" virt="non-virtual"><scope>Var</scope><name>Var</name></member>
      <member refid="classVar_1f1da9850b2af24e3f83e99eefdfc8afb" prot="public" virt="non-virtual"><scope>Var</scope><name>~Var</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
